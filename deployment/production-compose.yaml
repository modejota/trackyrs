services:
  trackyrs-database:
    container_name: trackyrs-database
    image: postgres:${POSTGRES_VERSION}-alpine
    env_file:
      - ../packages/database/.env.local
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER}
    healthcheck:
      test: ["CMD", "pg_isready", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}"]
      timeout: 5s
      retries: 5
      start_period: 60s
    volumes:
      - database_data:/var/lib/postgresql/data:rw
    ports:
      - "${POSTGRES_PORT}:5432"
    networks:
      - trackyrs_network
    restart: unless-stopped

  trackyrs-server:
    container_name: trackyrs-server
    build:
      context: ..
      dockerfile: deployment/Dockerfile.server
    env_file:
      - ../apps/server/.env.local
      - ../packages/database/.env.local
    environment:
      NODE_ENV: production
      PORT: 3000
      ALLOWED_CORS_ORIGIN: ${ALLOWED_CORS_ORIGIN}
      BETTER_AUTH_URL: ${BETTER_AUTH_URL}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
    depends_on:
      trackyrs-database:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - trackyrs_network
    restart: unless-stopped

  trackyrs-webapp:
    container_name: trackyrs-webapp
    build:
      context: ..
      dockerfile: deployment/Dockerfile.webapp
    env_file:
      - ../apps/webapp/.env.local
    environment:
      NODE_ENV: production
      PORT: 3001
      NEXT_PUBLIC_HONO_SERVER_URL: ${NEXT_PUBLIC_HONO_SERVER_URL}
    depends_on:
      trackyrs-server:
        condition: service_started
    ports:
      - "3001:3001"
    networks:
      - trackyrs_network
    restart: unless-stopped

volumes:
  database_data:

networks:
  trackyrs_network:
    driver: bridge
